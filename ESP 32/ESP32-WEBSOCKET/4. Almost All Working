//ESP32 
//LCD I2C DEPENDENCIES
#include <Wire.h>  
#include <LiquidCrystal_I2C.h>  

#define I2C_ADDR    0x27  
#define LCD_COLS    16
#define LCD_ROWS    2

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

// WEBSOCKET DEPENDENCIES
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncWebSocket.h>

const char* ssid = "S A G A R I N O";
const char* password = "741895623";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Wire.begin();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  ws.onEvent(onWsEvent);
  server.addHandler(&ws);
  server.begin();

  lcd.init();
  lcd.backlight();
  lcd.clear();
}

void loop() {
  ws.cleanupClients(); 
  // if (Serial.available() > 0) {
  //   String data = Serial.readStringUntil('\n');
  //   ws.textAll(data);
  // }
  epMode();
  delay(50); 
}

void onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  String stringData; // Declare stringData variable here to avoid compilation error
  int dataInt;
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.println("WebSocket client connected");
      break;
    case WS_EVT_DISCONNECT:
      Serial.println("WebSocket client disconnected");
      break;
    case WS_EVT_DATA:
      Serial.println("WebSocket data received");
      
      stringData = String((char*)data); // Move initialization to avoid compilation error
      lcdMessage(stringData);  // Convert data to String and pass to lcdMessage()
      dataInt = stringData.toInt();
      if(dataInt >= 1 && dataInt <= 180) {
        Serial.write(data, len);
        if(dataInt==1){
          lcdMessage("Door Locked");  // Convert data to String and pass to lcdMessage()
          delay(2000);
          lcdMessage("Enter Password");  // Convert data to String and pass to lcdMessage()
 
        }
        else{
          lcdMessage("Door Opened");  // Convert data to String and pass to lcdMessage()
          delay(2000);
          lcdMessage("Welcome");  // Convert data to String and pass to lcdMessage()
          delay(4000);
          lcdMessage("Enter Password");  // Convert data to String and pass to lcdMessage()
       
        }

      }

      Serial.println(); 
      break;
    case WS_EVT_ERROR:
      Serial.println("WebSocket error");
      break;
  }
}



void lcdMessage(String text) {
  int length = text.length();
  int lines = length / LCD_COLS + 1; // Calculate number of lines needed
  lcd.clear();
  // Display text line by line with word wrap
  for (int i = 0; i < lines; i++) {
    String line = text.substring(i * LCD_COLS, min((i + 1) * LCD_COLS, length));
    lcd.setCursor(0, i);
    lcd.print(line);
  }
}

void epMode() {
  char lastSerialMessage[100]; // Character array to store the last received message
  int index = 0; // Index to track the position in the character array
  while (Serial.available() > 0) {
    char receivedChar = Serial.read();
    if (receivedChar != '\n') { // Check if the received character is not a line break
      lastSerialMessage[index++] = receivedChar; // Add the received character to the character array
    }
    lastSerialMessage[index] = '\0'; // Null-terminate the character array
  }

  // Check if the character array contains the substring "max"
  if (strstr(lastSerialMessage, "Max") != NULL) {
    ws.textAll("Max is Reached!");
  }


  // Display the last received message after filtering out line breaks
  if (lastSerialMessage[0] != '\0') { // Check if the character array is not empty
    Serial.println(lastSerialMessage);
    lcd.clear();
    wordWrap(lastSerialMessage);
  }

  if (strstr(lastSerialMessage, "Letter-A") != NULL) {
    ws.textAll("Letter A Pressed!");
  }
  else if (strstr(lastSerialMessage, "Letter-B") != NULL) {
    ws.textAll("Letter B Pressed!");
  }
  else if (strstr(lastSerialMessage, "Letter-C") != NULL) {
    ws.textAll("Letter C Pressed!");
  }
  else if (strstr(lastSerialMessage, "Letter-D") != NULL) {
    ws.textAll("Letter D Pressed!");
  }    
}





void wordWrap(String text) {
  int length = text.length();
  int lines = length / LCD_COLS + 1; // Calculate number of lines needed
  
  // Display text line by line with word wrap
  for (int i = 0; i < lines; i++) {
    String line = text.substring(i * LCD_COLS, min((i + 1) * LCD_COLS, length));
    lcd.setCursor(0, i);
    lcd.print(line);
  }
}




// arduino 
#include <Servo.h>
#include <Keypad.h>

Servo myServo;  // Create a servo object to control a servo
const byte ROWS = 4; // Four rows
const byte COLS = 4; // Four columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; // Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.
byte colPins[COLS] = {5, 4, 3, 2}; // Connect keypad COL0, COL1, COL2 and COL3 to these Arduino pins.
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const String PASSWORD = "1234"; // Change to your desired password
const int MAX_TRIES = 3; // Maximum number of password attempts allowed
int tries = 0; // Number of password attempts made

void setup() {
    Serial.begin(115200); // Begin serial communication at 115200 baud rate
    myServo.attach(13);  // Attach the servo to pin 9
}

void loop() {
    if (Serial.available() > 0) {
        String data = Serial.readStringUntil('\n'); 
        int angle = data.toInt(); 
        
        if (angle != 0 || data == "0") {
            myServo.write(angle);
        }
    }
    epMode();

}


void epMode(){
  char key = keypad.getKey();
  
  if (key != NO_KEY) {
    static String enteredPassword = ""; // Variable to store entered password
    
    if (key == 'A') {
      Serial.println("Letter-A pressed"); // Print the key pressed
    }
    else if (key == 'B') {
      Serial.println("Letter-B pressed"); // Print the key pressed
    }
    else if (key == 'C') {
      Serial.println("Letter-C pressed"); // Print the key pressed
    }
    else if (key == 'D') {
      Serial.println("Letter-D pressed"); // Print the key pressed
    }
    else if (key != '#') {
      enteredPassword += key; // Append key to entered password
      Serial.println(enteredPassword); // Print the key pressed
    }


     else {
      // Check if entered password matches predefined password
      if (enteredPassword == PASSWORD) {
        // If password matches, allow servo control
        myServo.write(180);
        Serial.println("Correct!");
        delay(1000);
        Serial.println("Welcome to MRS - Final Project");
        delay(2000);
        delay(4000); // delay before closing again
        Serial.println("");        
        myServo.write(0);
        tries = 0; // Reset the number of attempts
      } else {
        tries++; // Increment the number of attempts
        Serial.print("Attempts remaining: ");
        Serial.println(MAX_TRIES - tries);
        delay(5000);
        if (tries < MAX_TRIES) {
          Serial.println("Enter Pass Again");
        } else {
          Serial.println("Max reached");
          delay(3000);
          Serial.println("Contact Owner/State your purpose"); 
          delay(2000);
          Serial.println("CHOOSE LETTER A - B - C - D"); 
          delay(2000);
          Serial.println("A: SHOPEE DELIVERY"); 
          delay(2000);
          Serial.println("B: Maningils Utang"); 
          delay(2000);
          Serial.println("C: Naabot na ko"); 
          delay(2000);
          Serial.println("D: Rybryb ni"); 
          tries = 0; // for trying
        }
      }
      // Clear entered password for next input
      enteredPassword = "";
    }
  }

}
