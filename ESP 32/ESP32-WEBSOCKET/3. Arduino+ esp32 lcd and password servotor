//esp 32
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define I2C_ADDR    0x27
#define LCD_COLS    16
#define LCD_ROWS    2

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

String enteredChars = ""; // Variable to store entered characters

void setup() {
  Serial.begin(115200);
  Wire.begin();
  lcd.init();
  lcd.backlight();
  lcd.clear();


}


void loop() {
  epMode();
}

void epMode() {
  char lastSerialMessage[100]; // Character array to store the last received message
  int index = 0; // Index to track the position in the character array
  while (Serial.available() > 0) {
    char receivedChar = Serial.read();
    if (receivedChar != '\n') { // Check if the received character is not a line break
      lastSerialMessage[index++] = receivedChar; // Add the received character to the character array
    }
    lastSerialMessage[index] = '\0'; // Null-terminate the character array
  }

  // Check if the character array contains the substring "max"
  if (strstr(lastSerialMessage, "Max") != NULL) {
    Serial.println("Yeahhs sirr");
  }


  // Display the last received message after filtering out line breaks
  if (lastSerialMessage[0] != '\0') { // Check if the character array is not empty
    Serial.println(lastSerialMessage);
    lcd.clear();
    wordWrap(lastSerialMessage);
  }
}





void wordWrap(String text) {
  int length = text.length();
  int lines = length / LCD_COLS + 1; // Calculate number of lines needed
  
  // Display text line by line with word wrap
  for (int i = 0; i < lines; i++) {
    String line = text.substring(i * LCD_COLS, min((i + 1) * LCD_COLS, length));
    lcd.setCursor(0, i);
    lcd.print(line);
  }
}

// arduino


#include <Servo.h>
#include <Keypad.h>

Servo myServo;  // Create a servo object to control a servo

const byte ROWS = 4; // Four rows
const byte COLS = 4; // Four columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; // Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.
byte colPins[COLS] = {5, 4, 3, 2}; // Connect keypad COL0, COL1, COL2 and COL3 to these Arduino pins.
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const String PASSWORD = "1234"; // Change to your desired password
const int MAX_TRIES = 3; // Maximum number of password attempts allowed
int tries = 0; // Number of password attempts made

void setup() {
  Serial.begin(115200); // Begin serial communication at 115200 baud rate
  myServo.attach(13);  // Attach the servo to pin 13
}

void loop() {
  epMode();
}

void epMode(){
  char key = keypad.getKey();
  
  if (key != NO_KEY) {
    static String enteredPassword = ""; // Variable to store entered password
    
    if (key != '#') {
      enteredPassword += key; // Append key to entered password
      Serial.println(enteredPassword); // Print the key pressed
    }
     else {
      // Check if entered password matches predefined password
      if (enteredPassword == PASSWORD) {
        // If password matches, allow servo control
        myServo.write(180);
        Serial.println("Correct!");
        delay(1000);
        Serial.println("Welcome to MRS - Final Project");
        delay(2000);
        delay(4000); // delay before closing again
        Serial.println("");        
        myServo.write(0);
        tries = 0; // Reset the number of attempts
      } else {
        tries++; // Increment the number of attempts
        Serial.print("Attempts remaining: ");
        Serial.println(MAX_TRIES - tries);
        delay(5000);
        if (tries < MAX_TRIES) {
          Serial.println("Enter Pass Again");
        } else {
          Serial.println("Max reached");
          tries = 0; // for trying
        }
      }
      // Clear entered password for next input
      enteredPassword = "";
    }
  }

}

//CONNECTIONS: 
SERVO MOTOR:
GND 
5V
PWM - 13

KEYPAD: 
{9, 8, 7, 6}; //ROWS
{5, 4, 3, 2}; //COLS


ARDUINO TO ESP32 
TX - RX
RX - TX





