//LCD I2C DEPENDENCIES
#include <Wire.h>  
#include <LiquidCrystal_I2C.h>  

#define I2C_ADDR    0x27  
#define LCD_COLS    16
#define LCD_ROWS    2

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

// WEBSOCKET DEPENDENCIES
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncWebSocket.h>

const char* ssid = "S A G A R I N O";
const char* password = "741895623";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  ws.onEvent(onWsEvent);
  server.addHandler(&ws);
  server.begin();
}

void loop() {
  ws.cleanupClients(); 
  if (Serial.available() > 0) {
    String data = Serial.readStringUntil('\n');
    ws.textAll(data);
  }
  delay(50); 
}

void onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.println("WebSocket client connected");
      break;
    case WS_EVT_DISCONNECT:
      Serial.println("WebSocket client disconnected");
      break;
    case WS_EVT_DATA:
      Serial.println("WebSocket data received");

      Serial.write(data, len);
      lcdMessage(String((char*)data));  // Convert data to String and pass to lcdMessage()
      Serial.println(); 
      break;
    case WS_EVT_ERROR:
      Serial.println("WebSocket error");
      break;
  }
}


void lcdMessage(String message) {
  lcd.init();
  lcd.backlight();
  lcd.clear();

  int maxLength = 16; // Maximum characters per line on the LCD
  int messageLength = message.length();
  int currentPosition = 0; // Current position in the message

  while (currentPosition < messageLength) {
    // Print a line of the message
    lcd.setCursor(0, 0);
    lcd.print(message.substring(currentPosition, min(currentPosition + maxLength, messageLength)));
    currentPosition += maxLength;

    // If the message is longer than one line, move to the next line
    if (currentPosition < messageLength) {
      lcd.setCursor(0, 1);
      lcd.print(message.substring(currentPosition, min(currentPosition + maxLength, messageLength)));
      currentPosition += maxLength;
    }

    // If the message still exceeds two lines, wait for a moment before scrolling
    if (currentPosition < messageLength) {
      delay(5000); // Adjust delay time as needed
      lcd.clear();
    }
  }
}