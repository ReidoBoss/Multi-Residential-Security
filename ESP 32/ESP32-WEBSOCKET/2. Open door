//LCD I2C DEPENDENCIES
#include <Wire.h>  
#include <LiquidCrystal_I2C.h>  

#define I2C_ADDR    0x27  
#define LCD_COLS    16
#define LCD_ROWS    2

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

// WEBSOCKET DEPENDENCIES
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncWebSocket.h>

const char* ssid = "S A G A R I N O";
const char* password = "741895623";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  ws.onEvent(onWsEvent);
  server.addHandler(&ws);
  server.begin();

  lcd.init();
  lcd.backlight();
  lcd.clear();
}

void loop() {
  ws.cleanupClients(); 
  if (Serial.available() > 0) {
    String data = Serial.readStringUntil('\n');
    ws.textAll(data);
  }
  delay(50); 
}

void onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  String stringData; // Declare stringData variable here to avoid compilation error
  int dataInt;
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.println("WebSocket client connected");
      break;
    case WS_EVT_DISCONNECT:
      Serial.println("WebSocket client disconnected");
      break;
    case WS_EVT_DATA:
      Serial.println("WebSocket data received");
      
      stringData = String((char*)data); // Move initialization to avoid compilation error
      Serial.write(data, len);


      Serial.println(); 
      break;
    case WS_EVT_ERROR:
      Serial.println("WebSocket error");
      break;
  }
}



void lcdMessage(String text) {
  int length = text.length();
  int lines = length / LCD_COLS + 1; // Calculate number of lines needed
  lcd.clear();
  // Display text line by line with word wrap
  for (int i = 0; i < lines; i++) {
    String line = text.substring(i * LCD_COLS, min((i + 1) * LCD_COLS, length));
    lcd.setCursor(0, i);
    lcd.print(line);
  }
}

// arduino 
#include <Servo.h>

Servo myServo;  // Create a servo object to control a servo

void setup() {
    Serial.begin(115200); // Begin serial communication at 115200 baud rate
    myServo.attach(13);  // Attach the servo to pin 9
}

void loop() {
    if (Serial.available() > 0) {
        String data = Serial.readStringUntil('\n'); 
        int angle = data.toInt(); 
        
        if (angle != 0 || data == "0") {
            myServo.write(angle);
        }
    }
}
